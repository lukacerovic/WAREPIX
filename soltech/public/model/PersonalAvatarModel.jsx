/**
 * Auto-generated by: https://github.com/pmndrs/gltfjsx
 * Command: npx gltfjsx@6.2.16 personalAvatarModel.gltf
 *
 * @format
 */

import React, { useRef } from "react";
import { useGLTF } from "@react-three/drei";

import gsap from "gsap";
import ScrollTrigger from "gsap/dist/ScrollTrigger";
import { useGSAP } from "@gsap/react";
gsap.registerPlugin(ScrollTrigger);
export default function Model(props) {
  const { nodes, materials } = useGLTF("/model/personalAvatarModel.gltf");
  const animateModel = useRef();
  
  useGSAP(() => {
    let tl = gsap
      .timeline({
        scrollTrigger: {
          trigger: props.element.current,
          start: "top center",
          end: "top 5%",
          scrub: true,
          // markers: true,
        },
      })
      .to(
        animateModel.current.scale,
        {
          x: 2.5,
          y: 2.5,
          z: 2.5,
          duration: 1,
        },
        "start"
      )
      .to(
        animateModel.current.position,
        {
          y: -1,

          duration: 1,
        },
        "start"
      )
      .to(
        animateModel.current.position,
        {
          y: -2.5,

          duration: 1,
        },
        "end"
      )
      .from(
        props.textAnimate[0].current,
        {
          opacity: 0,
          duration: 1,
          y: -10,
        },
        "start"
      );
    let tl2 = gsap
      .timeline({
        scrollTrigger: {
          trigger: props.element.current,
          start: "top 15%",
          end: "center center",
          scrub: true,
        },
      })
      .to(
        props.element.current,
        {
          x: "25%",
          y: "15%",
        },
        "mid"
      )
      .to(
        props.textAnimate[0].current,
        {
          opacity: 0,
        },
        "mid"
      )
      .to(
        animateModel.current.rotation,
        {
          y: 0.8,
          duration: 1,
        },
        "mid"
      )
      .from(
        props.textAnimate[1].current,
        {
          opacity: 0,
          duration: 1,
          y: -10,
        },
        "mid"
      );
    let tl3 = gsap
      .timeline({
        scrollTrigger: {
          trigger: props.element.current,
          start: "center 45%",
          end: "bottom center",
          scrub: true,
          // markers: true,
        },
      })
      .to(
        props.element.current,
        {
          x: "-25%",
          y: "55%",
        },
        "end"
      )
      .to(
        props.textAnimate[1].current,
        {
          opacity: 0,
        },
        "end"
      )
      .to(
        animateModel.current.rotation,
        {
          y: -0.8,
          duration: 1,
        },
        "end"
      )
      .from(
        props.textAnimate[2].current,
        {
          opacity: 0,
          duration: 1,
          y: -10,
        },
        "end"
      );
  }, []);
  return (
    <group {...props} ref={animateModel} dispose={null}>
      <mesh geometry={nodes.EyeLeft.geometry} material={materials.Wolf3D_Eye} />
      <mesh
        geometry={nodes.EyeRight.geometry}
        material={materials.Wolf3D_Eye}
      />
      <mesh
        geometry={nodes.Wolf3D_Head.geometry}
        material={materials.Wolf3D_Skin}
      />
      <mesh
        geometry={nodes.Wolf3D_Teeth.geometry}
        material={materials.Wolf3D_Teeth}
      />
      <mesh
        geometry={nodes.Wolf3D_Hair.geometry}
        material={materials.Wolf3D_Hair}
      />
      <mesh
        geometry={nodes.Wolf3D_Body.geometry}
        material={materials.Wolf3D_Body}
      />
      <mesh
        geometry={nodes.Wolf3D_Outfit_Bottom.geometry}
        material={materials.Wolf3D_Outfit_Bottom}
      />
      <mesh
        geometry={nodes.Wolf3D_Outfit_Footwear.geometry}
        material={materials.Wolf3D_Outfit_Footwear}
      />
      <mesh
        geometry={nodes.Wolf3D_Outfit_Top.geometry}
        material={materials.Wolf3D_Outfit_Top}
      />
    </group>
  );
}

useGLTF.preload("/model/personalAvatarModel.gltf");